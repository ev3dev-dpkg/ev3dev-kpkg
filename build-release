#!/bin/bash

set -e

CROSS_COMPILE=/usr/lib/x86_64-linux-gnu/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-

if [ "$FLAVOR" = "ev3" ]; then
    OVERLAY_DIR="ev3dev-ev3"
    KERNEL_DIR="ev3-kernel"
    DEBARCH="armel"
    DEFCONFIG="ev3dev_defconfig"
    DPUT_HOST="ev3dev-debian"
elif [ "$FLAVOR" = "bb.org" ]; then
    OVERLAY_DIR="ev3dev-bb.org"
    KERNEL_DIR="bb.org-kernel"
    DEBARCH="armhf"
    DEFCONFIG="bb.org_defconfig"
    DPUT_HOST="ev3dev-debian"
elif [ "$FLAVOR" = "rpi" ]; then
    OVERLAY_DIR="ev3dev-rpi"
    KERNEL_DIR="rpi-kernel"
    DEBARCH="armhf"
    DEFCONFIG="bcmrpi_defconfig"
    DPUT_HOST="ev3dev-raspbian"
elif [ "$FLAVOR" = "rpi2" ]; then
    OVERLAY_DIR="ev3dev-rpi2"
    KERNEL_DIR="rpi-kernel"
    DEBARCH="armhf"
    DEFCONFIG="bcm2709_defconfig"
    DPUT_HOST="ev3dev-debian"
else
    echo "Must specify kernel flavor. FLAVOR={ev3,bb.org,rpi,rpi2}"
    exit 1
fi

CHANGELOG="${OVERLAY_DIR}/changelog"

REVISION=$(dpkg-parsechangelog -l${CHANGELOG}| sed -n -e 's/^Version: //p')

PACKAGE_VERSION=$(dpkg-parsechangelog -l${CHANGELOG}| sed -n -e 's/Source: linux-source-//p')

# make sure git is ignoring debian/control in all of the modules because
# it is automatically updated

if [ ! -z $MODULES_TARGET ]; then
    pushd modules

    for d in $(ls)
    do
        pushd ${d}
        git update-index --assume-unchanged debian/control
        popd
    done

    popd
fi

# change to the kernel directory to do the actual building
pushd $KERNEL_DIR

cleanup() {
    echo "---- CLEANING UP ----"
    make ARCH=arm distclean
    git clean -dfX
    git clean -df
    find ../modules -mindepth 1 -maxdepth 1 -type d -exec make -C {} clean \;
}
cleanup

if [ "$1" == "clean" ]; then
    exit 0
fi

echo "---- LOADING DEFAULT CONFIGURATION ----"
make ARCH=arm ${DEFCONFIG}
# make sure kernel version (uname -v) matches debian revision
echo $(( $(expr match ${REVISION} '^[0-9]*') - 1 )) > .version

echo "---- CHECKING REVISION -----"
# Don't add '+' to version
touch .scmversion
KERNEL_VERSION=$(make ARCH=arm kernelrelease | tail -n 1)

if [ "${PACKAGE_VERSION}" != "${KERNEL_VERSION}" ]; then
    echo "Kernel version (${KERNEL_VERSION}) does not match ${CHANGELOG} version (${PACKAGE_VERSION})."
    exit 1
fi

if [ "$1" != "test" ]; then
    git tag -a "v${KERNEL_VERSION}_${REVISION//\~/rc}" -m "official release"
fi

echo "---- BUILDING PACKAGES ----"
export $(dpkg-architecture -a${DEBARCH})
MODULE_LOC=../modules \
    make-kpkg --rootcmd fakeroot --overlay-dir ../${OVERLAY_DIR} \
    --arch arm --subarch=${DEBARCH} --cross-compile ${CROSS_COMPILE} \
    --initrd --revision ${REVISION} --jobs $(nproc) \
    kernel_image kernel_headers ${MODULES_TARGET}

echo "---- GENERATING CHANGES FILE ----"
CHANGES_FILE="../ev3dev-kernel_${KERNEL_VERSION}_${REVISION}_${DEBARCH}.changes"
dpkg-genchanges -b > ${CHANGES_FILE}
# dpkg-genchanges includes host arch for some reason, so we have to remove it
sed -i "s/ amd64//" ${CHANGES_FILE}

cleanup
popd

if [ "$1" != "test" ]; then
    echo "---- SIGNING AND UPLOADING ----"
    debsign *.changes
    dput ${DPUT_HOST} *.changes
    ./rmdeb
fi
